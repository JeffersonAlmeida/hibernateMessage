<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC 
	"-//Hibernate/Hibernate Mapping DTD 3.0//EN"
	"http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- 

  This mapping demonstrates the use of Hibernate with
  all-handwritten SQL!
     
  This version is for Sybase/mssql
-->

<hibernate-mapping 
	package="org.hibernate.test.sql"
	default-access="field">

	<class name="Organization">
		<id name="id" unsaved-value="0" column="oid">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<set name="employments" 
			inverse="true"
			order-by="DUMMY">
			<key column="employer"/> <!-- only needed for DDL generation -->
			<one-to-many class="Employment"/>
			<loader query-ref="organizationEmployments"/>
		</set>
		<query-list name="currentEmployments" 
			query-ref="organizationCurrentEmployments"/>
		<loader query-ref="organization"/>
		<sql-insert>INSERT INTO ORGANIZATION (NAME, OID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE ORGANIZATION SET NAME=UPPER(?) WHERE OID=?</sql-update>
		<sql-delete>DELETE FROM ORGANIZATION WHERE OID=?</sql-delete>
	</class>
	
	<class name="Person">
		<id name="id" unsaved-value="0" column="pid">
			<generator class="increment"/>
		</id>
		<property name="name" not-null="true"/>
		<loader query-ref="person"/>
		<sql-insert>INSERT INTO PERSON (NAME, PID) VALUES ( UPPER(?), ? )</sql-insert>
		<sql-update>UPDATE PERSON SET NAME=UPPER(?) WHERE PID=?</sql-update>
		<sql-delete>DELETE FROM PERSON WHERE PID=?</sql-delete>
	</class>
	
	<class name="Employment">
		<id name="id" unsaved-value="0" column="eid">
			<generator class="increment"/>
		</id>
		<many-to-one name="employee" not-null="true" update="false"/>
		<many-to-one name="employer" not-null="true" update="false"/>
		<property name="startDate" not-null="true" update="false" insert="false"/>
		<property name="endDate" insert="false"/>
		<property name="regionCode" update="false"/>
	  <property name="salary" type="org.hibernate.test.sql.MonetaryAmountUserType"> 
			<column name="VALUE" sql-type="float"/>
			<column name="CURRENCY"/>			
		</property>
		<loader query-ref="employment"/>
   		<sql-insert>
			INSERT INTO EMPLOYMENT 
				(EMPLOYEE, EMPLOYER, STARTDATE, REGIONCODE, VALUE, CURRENCY, EID) 
				VALUES (?, ?, getDate(), UPPER(?), ?, ?, ?)
		</sql-insert>
		<sql-update>UPDATE EMPLOYMENT SET ENDDATE=?, VALUE=?, CURRENCY=? WHERE EID=?</sql-update> 
		<sql-delete>DELETE FROM EMPLOYMENT WHERE EID=?</sql-delete> 
	</class>
	
	<sql-query name="person">
		<return alias="p" class="Person" lock-mode="upgrade"/>
		SELECT NAME AS {p.name}, PID AS {p.id} FROM PERSON WHERE PID=? /*FOR UPDATE*/
	</sql-query>

	<sql-query name="organization">
		<return alias="org" class="Organization"/>
		<return-join alias="emp" property="org.employments"/>
		SELECT {org.*}, {emp.*}
		FROM ORGANIZATION org
			LEFT OUTER JOIN EMPLOYMENT emp ON org.OID = emp.EMPLOYER
		WHERE org.OID=?
	</sql-query>

	<!--sql-query name="organization">
		<return alias="org" class="Organization"/>
		SELECT NAME AS {org.name}, OID AS {org.id} FROM ORGANIZATION
		WHERE OID=?
	</sql-query-->
	
	<sql-query name="allOrganizationsWithEmployees" flush-mode="never">
		<return alias="org" class="Organization"/>
		SELECT DISTINCT org.NAME AS {org.name}, org.OID AS {org.id} 
		FROM ORGANIZATION org
		INNER JOIN EMPLOYMENT e ON e.EMPLOYER = org.OID
	</sql-query>
	
	<sql-query name="orgNamesOnly">
		<return-scalar column="NAME" type="string"/>
		SELECT org.NAME FROM ORGANIZATION org
	</sql-query>
	
	<sql-query name="orgNamesAndOrgs">
		<return-scalar column="thename" type="string"/>
		<return alias="org" class="Organization"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.OID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>
	
	<sql-query name="orgsAndOrgNames">
		<return alias="org" class="Organization"/>
		<return-scalar column="thename" type="string"/>
		SELECT org.NAME AS thename, org.NAME AS {org.name}, org.OID AS {org.id} 
		FROM ORGANIZATION org
		ORDER BY thename
	</sql-query>	

	<sql-query name="orgIdsAndOrgNames">
		<return-scalar column="orgid" type="long"/>
		<return-scalar column="thename" type="string"/>
		SELECT NAME AS thename, OID AS orgid
		FROM ORGANIZATION
		ORDER BY thename
	</sql-query>
	
	<sql-query name="employment">
		<return alias="emp" class="Employment"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EID AS {emp.id}
		FROM EMPLOYMENT
		WHERE EID = ?
	</sql-query>
	
	<sql-query name="organizationEmployments">
		<load-collection alias="empcol" role="Organization.employments"/>
		SELECT {empcol.*}
		FROM EMPLOYMENT empcol
		WHERE EMPLOYER = :id
		ORDER BY STARTDATE ASC, EMPLOYEE ASC
	</sql-query>	

	<sql-query name="organizationCurrentEmployments">
		<return alias="emp" class="Employment">		    
			<return-property name="salary"> 
		      <!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
  			  <return-column name="VALUE"/>
			  <return-column name="CURRENCY"/>			
			</return-property>
			<!-- Here we are remapping endDate. Notice that we can still use {emp.endDate} in the SQL. -->
			<return-property name="endDate" column="myEndDate"/>
		</return>
		<synchronize table="EMPLOYMENT"/>
		SELECT EMPLOYEE AS {emp.employee}, EMPLOYER AS {emp.employer}, 
			STARTDATE AS {emp.startDate}, ENDDATE AS {emp.endDate},
			REGIONCODE as {emp.regionCode}, EID AS {emp.id}, VALUE, CURRENCY
		FROM EMPLOYMENT
		WHERE EMPLOYER = :id AND ENDDATE IS NULL
		ORDER BY STARTDATE ASC
	</sql-query>

	<sql-query name="simpleScalar_MSSP" callable="true">
	 <return-scalar column="name" type="string"/>
	 <return-scalar column="value" type="long"/>
	 { call simpleScalar(:number) }
	</sql-query>

	<sql-query name="paramhandling" callable="true">
	 <return-scalar column="value" type="long"/>
	 <return-scalar column="value2" type="long"/>
	 { call paramHandling(?,?) }
	</sql-query>
	
	<sql-query name="selectAllEmployees_MSSP" callable="true">
		<return alias="emp" class="Employment">
			<return-property name="employee" column="EMPLOYEE"/>
			<return-property name="employer" column="EMPLOYER"/>			
			<return-property name="startDate" column="STARTDATE"/>
			<return-property name="endDate" column="ENDDATE"/>			
			<return-property name="regionCode" column="REGIONCODE"/>			
			<return-property name="id" column="EID"/>						
			<return-property name="salary"> 
		      <!-- as multi column properties are not supported via the
		      {}-syntax, we need to provide an explicit column list for salary via <return-property> -->
  			  <return-column name="VALUE"/>
			  <return-column name="CURRENCY"/>			
			</return-property>
		</return>
	 { call selectAllEmployments() }
	</sql-query>
	
</hibernate-mapping>
